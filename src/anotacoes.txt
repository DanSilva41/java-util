- Um array é uma estrutura de dados e serve para guardar elementos (valores primitivos ou referências)
- Arrays usam colchetes ([]) sintaticamente
- Arrays têm um tamanho fixo!
- Um array também é um objeto!
- Arrays são zero-based (o primeiro elemento se encontra na posição 0)
- Um array é sempre inicializado com os valores padrões.
- Ao acessar uma posição inválida recebemos a exceção ArrayIndexOutOfBoundException
- Arrays possuem um atributo length para saber o tamanho

___________________________________________________________
- Uma array do tipo Object pode guardar qualquer tipo de referência
- Quando convertemos uma referência genérica para uma referência mais específica é preciso usar um type cast
- O cast só compila quando é possível, mesmo assim pode falhar na hora de rodar
- Quando o type cast falha podemos receber uma ClassCastException
- Para receber valores ao chamar o programa Java na linha de comando podemos usar o array String[] no método main

___________________________________________________________
java.util.ArrayList
VANTAGENS:
    - Acesso fácil a qualquer elemento aleato'rio.
    - Ao adicionar um novo elemento, o ArrayList sabe automaticamente qual a pro'xima posição livre.
DESVANTAGENS:
    - Capacidade limitada ao seu tamanho no momento da criação.
    - Operacao CUSTOSA ao remover alguma posicao, pois internamente ela reorganiza as posicoes na array(array nao permite "buracos").

java.util.LinkedList
* Lista duplamente encadeada: O elemento guardar a referencia do elemento anterior o do sucessor
VANATAGENS:
    - Ao remover um elemento não causa grande impacto.
    - Nao ' possível ter acesso direto sobre uma posicão de uma LinkedList, é necessário iterar desde o início

java.util.Vector: Uma "ArrayList threadsafe"
    - Thread safe: estruturas de dados que pode ser compartilhadas pelas pilhas de execucão.

- A interface java.util.Collection que é a interface de todas as coleções
- As listas são sequencias que aceitam elementos duplicados
- Os conjuntos (java.util.Set) também são coleções, mas não aceitam duplicados nem são listas
___________________________________________________________
WRAPPERS

TIPO PRIMITIVO              WRAPPER
int                         java.lang.Integer
           Autoboxing -->
           <--  Unboxing

- Para cada primitivo existe uma classe chamada Wrapper
- Para guardar um primitivo numa coleção é preciso criar um objeto que embrulha o valor
- A criação do objeto Wrapper é chamada de autoboxing
- A retirada do valor primitivo do objeto Wrapper é chamada de unboxing
- Autoboxing e unboxing acontece automaticamente.
- As classes wrapper possuem vários métodos auxiliares, por exemplo para o parsing
- Todas as classes wrappers que representam um valor numérico possuem a classe java.lang.Number como mãe
____________________________________________________________
Ordenação de elementos em listas

- Para ordenar uma lista é preciso definir um critério de ordenação
- Há duas formas de definir esse critério
    Pela interface Comparator
    Pela interface Comparable (ordem natural)
- O algoritmo de ordenação já foi implementado
    Na lista no método sort
    Na classe Collections pelo método sort
- A classe Collections é uma fachada com vários métodos auxiliares para trabalhar com as coleções, principalmente listas


